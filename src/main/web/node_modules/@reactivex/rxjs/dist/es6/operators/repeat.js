import Subscriber from '../Subscriber';
import immediate from '../schedulers/immediate';
export default function repeat(count = -1) {
    return this.lift(new RepeatOperator(count, this));
}
class RepeatOperator {
    constructor(count, original) {
        this.count = count;
        this.original = original;
    }
    call(subscriber) {
        return new RepeatSubscriber(subscriber, this.count, this.original);
    }
}
class RepeatSubscriber extends Subscriber {
    constructor(destination, count, original) {
        super(destination);
        this.count = count;
        this.original = original;
        this.invalidateRepeat();
    }
    repeatSubscription() {
        let state = { dest: this.destination, count: this.count, original: this.original };
        immediate.scheduleNow(RepeatSubscriber.dispatchSubscription, state);
    }
    invalidateRepeat() {
        let completed = this.count === 0;
        if (completed) {
            this.destination.complete();
        }
        return completed;
    }
    static dispatchSubscription({ dest, count, original }) {
        return original.subscribe(new RepeatSubscriber(dest, count, original));
    }
    _complete() {
        if (!this.invalidateRepeat()) {
            this.count--;
            this.repeatSubscription();
        }
    }
}
